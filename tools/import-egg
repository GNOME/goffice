#!/usr/local/bin/perl -w
# -----------------------------------------------------------------------------

use strict;

$| = 1;

die "$0: must run from top-level gnumeric directory.\n"
    unless -r "gnumeric-config.h";
my $dst = "src/egg";

my $eggdir = $ARGV[0];
$eggdir = "../libegg" unless defined $eggdir;
die "$0: must specify libegg directory on command line.\n"
    unless -d $eggdir;

-d $dst or mkdir $dst or
    die "$0: cannot mkdir $dst: $!\n";

&copy_subsystem ("menu");
&copy_subsystem ("toolbar");

# -----------------------------------------------------------------------------

sub copy_subsystem {
    my ($sys) = @_;

    my $srcdir = "$eggdir/libegg/$sys";
    my $dstdir = "$dst/$sys";

    -d $dstdir or mkdir "$dstdir" or
	die "$0: cannot mkdir $dstdir: $!\n";

    my @sources;

    local (*SRC,*DST);
    open (SRC, "<$srcdir/Makefile.am") or
	die "$0: Cannot read $srcdir/Makefile.am: $!\n";
    open (DST, ">$dstdir/Makefile.am.new") or
	die "$0: Cannot write $dstdir/Makefile.am.new: $!\n";
    print STDERR "Creating $dstdir/Makefile.am...";
    while (<SRC>) {
	next if /^test_/;
	next if /^noinst_PROGRAMS/;

	s/EGG_CFLAGS/GNUMERIC_CFLAGS/;
	s/\s*\$\(EGG_LIBS\)/ /;

	if (/^[a-zA-Z0-9_]+_(HEADERS|la_SOURCES)\s*=/ ... !/\\\s*$/) {
	    my $line = $_;
	    $line =~ s/^.*=//;
	    $line =~ s/\s*\\//;
	    $line =~ s/^\s+//;
	    $line =~ s/\s+$//;
	    push @sources, split (' ', $line) if $line ne '';
	}
	print DST;
    }
    close (*SRC);
    close (*DST);
    &update_file ("$dstdir/Makefile.am");

    foreach my $file (@sources) {
	local (*SRC,*DST);
	open (SRC, "<$srcdir/$file") or
	    die "$0: Cannot read $srcdir/$file: $!\n";
	open (DST, ">$dstdir/$file.new") or
	    die "$0: Cannot write $dstdir/$file.new: $!\n";

	print STDERR "Creating $dstdir/$file...";
      LINE:
	while (<SRC>) {
	    if (m{^\s*\#\s*include\s*[<\"]libegg/(.*)[>\"]}) {
		print DST "#include \"egg/$1\"\n";
		next LINE;
	    }

	    # Turn C++ comments into C comments.
	    if (m|^\s*//|) {
		s|//|/*|;
		s|$|*/|;
	    }

	    print DST;
	}
	close (*SRC);
	close (*DST);

	&update_file ("$dstdir/$file");
    }
}

# -----------------------------------------------------------------------------

sub update_file {
    my ($old) = @_;
    my ($new) = "$old.new";

    if (!-r $old) {
	rename $new, $old or
	    die "$0: Cannot rename $new to $old: $!\n";
	print STDERR " -- done.\n";
    } else {
	system ("cmp '$old' '$new' >/dev/null");
	if ($? == 0) {
	    print STDERR " -- unchanged.\n";
	    unlink $new;
	} else {
	    rename $new, $old or
		die "$0: Cannot rename $new to $old: $!\n";
	    print STDERR " -- done.\n";
	}
    }
}

# -----------------------------------------------------------------------------
