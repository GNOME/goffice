#!/usr/bin/perl -w
# -----------------------------------------------------------------------------

use strict;

$| = 1;

my $myself = $0;
$myself =~ s|^.*/||;

die "$0: must run from top-level goffice directory.\n"
    unless -r "goffice/goffice.h";
my $dst = "goffice/cut-n-paste/pcre";

my $srcdir = $ARGV[0];
$srcdir = "../pcre" unless defined $srcdir;
die "$0: must specify pcre directory on command line.\n"
    unless -d $srcdir;

-d $dst or mkdir $dst or
    die "$0: cannot mkdir $dst: $!\n";

my $force_utf8 = 1;

my $configfile = "<goffice/goffice-config.h>";

# -----------------------------------------------------------------------------

my ($PCRE_MAJOR,$PCRE_MINOR,$PCRE_DATE);
{
    my $filename = "$srcdir/configure.in";
    local (*SRC);
    open (SRC, "<$filename") or
	die "$0: Cannot read $filename: $!\n";
    while (<SRC>) {
	$PCRE_MAJOR = $1 if /^PCRE_MAJOR\s*=\s*(.*)$/;
	$PCRE_MINOR = $1 if /^PCRE_MINOR\s*=\s*(.*)$/;
	$PCRE_DATE = $1 if /^PCRE_DATE\s*=\s*(.*)$/;
    }
    close (*SRC);
}

my @SRC_C = ('maketables.c', 'get.c', 'study.c', 'pcre.c', 'pcreposix.c');
my @EXTRA_C = ();
my @SRC_H = ('pcreposix.h');
my @noinst_H = ('internal.h', 'pcre.h');
my @EXTRA_FILES = ('COPYING');

my %namehack = ('pcre.h' => 'pcre.in');

for my $filename (@SRC_C, @EXTRA_C, @SRC_H, @noinst_H) {
    my $srcfilename = "$srcdir/" . ($namehack{$filename} || $filename);
    my $dstfilename = "$dst/$filename";
    my $tmpfilename = "$dstfilename.new";

    local (*SRC, *DST);
    open (SRC, "<$srcfilename") or
	die "$0: Cannot read $srcfilename: $!\n";
    open (DST, ">$tmpfilename") or
	die "$0: Cannot create $tmpfilename: $!\n";
    print STDERR "Creating $dstfilename...";

    my $where;
    if ($filename =~ /\.h$/) {
	$where = $filename;
	$where =~ s/\.h$/.c/;
    } else {
	$where = 'below';
    }

    print DST "/* File import from pcre to goffice by $myself.  Do not edit.  */\n\n";
    print DST "/* This file has been programatically changed.  */\n";
    print DST "/* This makes the following file fall under GPL license, see $where.  */\n\n";

    my $backchar_fix = 0;
    my $backchar_indent = '';

    if ($filename =~ /printint/) {
	print DST "#include $configfile\n";
    }

    while (<SRC>) {
	s/\@PCRE_MAJOR\@/$PCRE_MAJOR/;
	s/\@PCRE_MINOR\@/$PCRE_MINOR/;
	s/\@PCRE_DATE\@/$PCRE_DATE/;

	s/\b(to(lower|upper)|is(lower|upper|digit|xdigit|space|print|cntrl|alpha|alnum|graph|punct))\b/g_unichar_$1/g;

	if (/^static\s+int\s*$/) {
	    $_ .= <SRC>;
	}

	# Skip the definition of ord2utf8 and use g_unichar_to_utf8 instead.
	if (/^static\s+int\s+ord2utf8\b/ ... /^\}\s*$/) {
	    next;
	}
	s/ord2utf8/g_unichar_to_utf8/g;

	if (/\bfor\b.*\bsizeof\s*\(\s*utf8_table1\s*\)/ .. /;\s*$/) {
	    next unless s/\bfor\b.*$/i = g_unichar_to_utf8 (c, NULL);/;
	}

	next if /^static\b.*\butf8_table[123]\b/ .. /;\s*$/;

	if (/^\s*\#\s*define\s+GETCHAR\b.*\\$/ .. /\}$/) {
	    next unless /GETCHAR/;
	    s/\\/do { (c) = g_utf8_get_char (eptr); } while (0)/;
	}

	if (/^\s*\#\s*define\s+GETCHARINC(TEST)?\b.*\\$/ .. /\}$/) {
	    next unless /GETCHARINC/;
	    s/\\/do { GETCHAR(c,eptr); (eptr) = g_utf8_next_char (eptr); } while (0)/;
	}

	if (/^\s*\#\s*define\s+GETCHARLEN\b.*\\$/ .. /\}$/) {
	    next unless /GETCHARLEN/;
	    s/\\/do { GETCHAR(c,eptr); (len) += g_utf8_skip[(uschar)(*eptr)] - 1; } while (0)/;
	}

	if ($filename =~ /(maketables|pcre)\.c/i) {
	    if (/^\s*\#\s*include\s*.internal\.h/) {
		$_ .= "#include <glib.h>\n";
	    }
	}

	if ($filename =~ /pcre\.c/i) {
	    s/^\s*int\s+runlength;\s*$//;
	}

	if ($filename =~ /\.c$/) {
	    if (/^\s*\#\s*include\s*.internal\.h/) {
		$_ = "#include $configfile\n" . $_;
	    }
	}

	next if /^\s*\#\s*include\s*"config\.h"/;

	if (s{^(\s*\#\s*include\s*.ctype\.h.*)}{/* $1 */}) {
	    print DST "/* Whatever the question is, ctype.h is not the answer.  */\n";
	}

	s|^\s*(\#\s*include\s*.printint\.c.)\s*$|/* $1 */|;

	if (/^(\s*)REG_(\S+)(\s*)=(\s*)1,/) {
	    $_ = "$1REG_OK$3=${4}0,\n$_";
	}

	if (s{^(\s*\#\s*include\s*.chartables\.c.*)}{/* $1 */}) {
	    print DST "static const unsigned char *\n";
	    print DST "make_pcre_default_tables (void)\n";
	    print DST "{\n";
	    print DST "  static const unsigned char *res = NULL;\n";
	    print DST "  if (res == NULL) {\n";
	    print DST "    res = pcre_maketables ();\n";
	    print DST "  }\n";
	    print DST "  return res;\n";
	    print DST "}\n\n";
	}
	s/pcre_default_tables/make_pcre_default_tables ()/;

	if ($filename =~ /posix/i) {
	    s/\bregex_t\b/go_regex_t/g;
	    s/\bregoff_t\b/go_regoff_t/g;
	    # Not regmatch_t, for now.
	    s/\bregcomp\b/go_regcomp/g;
	    s/\bregexec\b/go_regexec/g;
	    s/\bregerror\b/go_regerror/g;
	    s/\bregfree\b/go_regfree/g;

	    if ($force_utf8) {
		s/options/options | PCRE_UTF8 | PCRE_NO_UTF8_CHECK/ if /pcre_compile/;
	    }
	}

	s/\bEXPORT\b\s*//;

	if ($force_utf8) {
	    s{(md->utf8)}{1 /* $1 */};
	    s{\(utf8\)}{(1 /* utf8 */)};
	}

	print DST;
    }

    close (*SRC);
    close (*DST);

    if (1) {
	system ("indent", "-kr", "-fc1", "-psl", "-pcs", $tmpfilename);
	unlink "$tmpfilename~";
    }
    &update_file ($dstfilename);
}

foreach my $filename (@EXTRA_FILES) {
    my $srcfilename = "$srcdir/" . ($namehack{$filename} || $filename);
    my $dstfilename = "$dst/$filename";
    my $tmpfilename = "$dstfilename.new";

    local (*SRC, *DST);
    open (SRC, "<$srcfilename") or
	die "$0: Cannot read $srcfilename: $!\n";
    open (DST, ">$tmpfilename") or
	die "$0: Cannot create $tmpfilename: $!\n";
    print STDERR "Creating $dstfilename...";

    while (<SRC>) {
	print DST;
    }

    close (*SRC);
    close (*DST);
    &update_file ($dstfilename);
}

{
    my $filename = "Makefile.am";
    my $dstfilename = "$dst/$filename";
    my $tmpfilename = "$dstfilename.new";

    local (*DST);
    open (DST, ">$tmpfilename") or
	die "$0: Cannot create $tmpfilename: $!\n";
    print STDERR "Creating $dstfilename...";

    print DST "noinst_LTLIBRARIES = libpcre.la\n";
    print DST "libpcre_la_SOURCES = ", join (' ', @SRC_C), "\n";
    print DST "EXTRA_DIST = ", join (' ', @EXTRA_C, @EXTRA_FILES), "\n\n";

    print DST "libpcre_a_ladir = \$(includedir)/libgoffice-1/goffice/cut-n-paste/pcre\n";

    print DST "libpcre_a_la_HEADERS = ", join (' ', @SRC_H), "\n";
    print DST "noinst_HEADERS = ", join (' ', @noinst_H), "\n\n";

    print DST "INCLUDES = \\\n";
    print DST "\t\$(GOFFICE_CFLAGS) \\\n";
    print DST "\t-I\$(top_builddir) \\\n";
    print DST "\t-DSUPPORT_UTF8 \\\n";
    print DST "\t-DNEWLINE=10 \\\n";
    print DST "\t-DPOSIX_MALLOC_THRESHOLD=100 \\\n";
    print DST "\t-DLINK_SIZE=2 \\\n";
    print DST "\t-DMATCH_LIMIT=10000000\n\n";

    close (*DST);

    &update_file ($dstfilename);
}

# -----------------------------------------------------------------------------

sub update_file {
    my ($old) = @_;
    my ($new) = "$old.new";

    if (!-r $old) {
	rename $new, $old or
	    die "$0: Cannot rename $new to $old: $!\n";
	print STDERR " -- done.\n";
    } else {
	system ("cmp '$old' '$new' >/dev/null");
	if ($? == 0) {
	    print STDERR " -- unchanged.\n";
	    unlink $new;
	} else {
	    rename $new, $old or
		die "$0: Cannot rename $new to $old: $!\n";
	    print STDERR " -- done.\n";
	}
    }
}

# -----------------------------------------------------------------------------
